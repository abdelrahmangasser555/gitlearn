														commands in course 
														------------------



git rm -f <filename>  --> removes a file permenantly 

git rm --cache <filename> --> removes the file from the commit 

git log --> displays all the commits 

git commit -m "message" --> making a commit to all files in the git folder

git commit -a -m "message"  --> makes a commit with all the files in the statging are "git added "

git chechout <the commit id> --> moves the head to a specific commit "the time machine"

git checkout master --> moves the head to the first last commit 

git revert <commit id > --> makes a new commit and make a change in the commit you reverted 

git reset <commit id > --> reset to a specific period of time 

--hard --> used with reset and it removes every thing after the commit you reseted to "not reccomended"

--soft --> used with reset it changes a specific commit 

--mixed --> used with reset it goes back one commit and it change it without removing any thing 


--online --> used with log it show a all the commits commit per line help siaplaying all the commits 


#using gitignore 

1) first make a .gitignore file 

2) add all the file name into the gitignore 

3) remove all the cache in the staging area git rm -r -cache . 

4)for ignoring an intire folder add /* after the name of the folder 


#creating branchesdeleting them and directing to them and showing them 

1)git checkout -b <branch name> -->creating a branch and dirscting to it by checkout
2)git branch <branch name> --> creating a branch
3)git branch -a(all) --> make a list of the branches you have 
4)git branch -d <branch name > --> deleting a specific branch note -> can't delete a branch while you are on it 

#git push and pull 

git push -u origin <branch name > --> push to remote repo and the -u flag used to keep track of the branch automatically 

git pull origin master --> pulls the master branch from the remote repo 

git remote add origin <https link to repo> --> makes a link between the local repo and the remote repo 



<<<<<<< HEAD
#general trags that can be used with remote repos 

-n or --dry-run:

Simulate the push without actually making any changes. Useful for testing the push operation.

-f or --force:

Force the push, even if it results in non-fast-forward updates. Use with caution, as it can overwrite history.

-delete:

delete remote branch

-mirror :

makes a mirror or a copy of the local repo in the remote repo 

 


=======
>>>>>>> c3bc04d (pushing and pulling origin remote repo)

